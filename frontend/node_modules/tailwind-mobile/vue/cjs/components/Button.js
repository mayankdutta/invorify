"use strict";

exports.__esModule = true;
exports.default = void 0;

var _vue = require("vue");

var _cls = require("../shared/cls.js");

var _useTouchRipple = require("../shared/use-touch-ripple.js");

var _useThemeClasses = require("../shared/use-theme-classes.js");

var _positionClass = require("../shared/position-class.js");

var _useDarkClasses = require("../shared/use-dark-classes.js");

function render(_ctx, _cache) {
  return (0, _vue.openBlock)(), (0, _vue.createBlock)((0, _vue.resolveDynamicComponent)(_ctx.Component), {
    ref: "rippleElRef",
    class: (0, _vue.normalizeClass)(_ctx.classes)
  }, {
    default: (0, _vue.withCtx)(() => [(0, _vue.renderSlot)(_ctx.$slots, "default")]),
    _: 3
  }, 8, ["class"]);
}

var _default = {
  name: 'twm-button',
  render,
  props: {
    component: {
      type: String,
      default: 'button'
    },
    colors: {
      type: Object
    },
    ios: {
      type: Boolean,
      default: undefined
    },
    material: {
      type: Boolean,
      default: undefined
    },
    // Anchor props
    href: {
      type: [Boolean, String],
      default: undefined
    },
    // Style props
    outline: {
      type: Boolean,
      default: false
    },
    clear: {
      type: Boolean,
      default: false
    },
    rounded: {
      type: Boolean,
      default: false
    },
    small: {
      type: Boolean,
      default: false
    },
    large: {
      type: Boolean,
      default: false
    },
    raised: {
      type: Boolean,
      default: false
    },
    inline: {
      type: Boolean,
      default: false
    },
    // Segmented
    segmented: {
      type: Boolean,
      default: false
    },
    segmentedStrong: {
      type: Boolean,
      default: false
    },
    segmentedActive: {
      type: Boolean,
      default: false
    },
    touchRipple: {
      type: Boolean,
      default: true
    }
  },

  setup(props, ctx) {
    const rippleElRef = (0, _vue.ref)(null);
    const Component = (0, _vue.computed)(() => {
      let c = props.component;

      if (typeof props.component === 'undefined' && (props.href || props.href === '')) {
        c = 'a';
      }

      return c;
    });
    (0, _useTouchRipple.useTouchRipple)(rippleElRef, props);
    const size = (0, _vue.computed)(() => props.large ? 'large' : props.small ? 'small' : 'medium');
    const style = (0, _vue.computed)(() => {
      let value = props.outline ? 'outline' : props.clear || props.segmented && !props.segmentedActive ? 'clear' : 'fill';
      if (props.segmentedStrong) value = 'segmentedStrong';
      if (props.segmentedStrong && props.segmentedActive) value = 'segmentedStrongActive';
      return value;
    });
    const colors = (0, _vue.computed)(() => ({
      text: 'text-primary',
      border: 'border-primary',
      bg: 'bg-primary',
      activeBg: 'active:bg-primary',
      activeBgDark: 'active:bg-primary-dark',
      touchRipple: 'touch-ripple-primary',
      ...(props.colors || {})
    }));
    const c = (0, _useThemeClasses.useThemeClasses)(props, () => ({
      base: {
        common: (0, _cls.cls)('uppercase flex text-center justify-center items-center appearance-none px-2 py-1 transition-colors focus:outline-none cursor-pointer select-none overflow-hidden z-10', props.inline ? 'inline-flex' : 'w-full flex', (0, _positionClass.positionClass)('relative', ctx.attrs.class)),
        ios: `duration-100 font-semibold`,
        material: `duration-300 font-medium tracking-wider`,
        square: props.segmented && !props.segmentedStrong ? 'first:rounded-l last:rounded-r' : 'rounded',
        rounded: props.segmented && !props.segmentedStrong ? '' : 'rounded-full'
      },
      style: {
        fill: `text-white ${colors.value.bg} ${colors.value.activeBgDark} touch-ripple-white`,
        outline: (0, _cls.cls)(!props.segmented && `border-2 ${colors.value.border}`, colors.value.text, colors.value.activeBg, 'active:bg-opacity-15', colors.value.touchRipple),
        clear: `${colors.value.text} ${colors.value.activeBg} active:bg-opacity-15 ${colors.value.touchRipple}`,
        segmentedStrong: (0, _cls.cls)(`active:bg-black active:bg-opacity-10`, (0, _useDarkClasses.useDarkClasses)('dark:active:bg-white dark:active:bg-opacity-5 dark:touch-ripple-white')),
        segmentedStrongActive: 'duration-0'
      },
      size: {
        small: {
          ios: `text-xs h-7`,
          material: `text-sm h-7`
        },
        medium: {
          common: 'text-sm',
          ios: `h-7`,
          material: `h-9`
        },
        large: {
          ios: `h-11`,
          material: `h-12`
        }
      },
      raised: `shadow active:shadow-lg`
    }));
    const classes = (0, _vue.computed)(() => (0, _cls.cls)(c.value.base[props.rounded ? 'rounded' : 'square'], // style
    c.value.style[style.value], // size
    c.value.size[size.value], props.raised && c.value.raised));
    return {
      rippleElRef,
      classes,
      Component
    };
  }

};
exports.default = _default;