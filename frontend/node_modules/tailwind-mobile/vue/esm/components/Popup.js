import { normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, resolveDynamicComponent as _resolveDynamicComponent, withCtx as _withCtx, createBlock as _createBlock, Fragment as _Fragment } from "vue";

function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock(_Fragment, null, [_ctx.backdrop ? (_openBlock(), _createElementBlock("div", {
    key: 0,
    class: _normalizeClass(_ctx.c.backdrop[_ctx.state]),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onBackdropClick && _ctx.onBackdropClick(...args))
  }, null, 2)) : _createCommentVNode("", true), (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.component), {
    class: _normalizeClass(_ctx.classes)
  }, {
    default: _withCtx(() => [_renderSlot(_ctx.$slots, "default")]),
    _: 3
  }, 8, ["class"]))], 64);
}

import { computed } from 'vue';
import { cls } from '../shared/cls.js';
import { positionClass } from '../shared/position-class.js';
import { useDarkClasses } from '../shared/use-dark-classes.js';
import { useThemeClasses } from '../shared/use-theme-classes.js';
export default {
  name: 'twm-popup',
  render,
  props: {
    component: {
      type: String,
      default: 'div'
    },
    colors: {
      type: Object
    },
    ios: {
      type: Boolean,
      default: undefined
    },
    material: {
      type: Boolean,
      default: undefined
    },
    size: {
      type: String,
      default: 'w-screen h-screen md:w-160 md:h-160'
    },
    opened: Boolean,
    backdrop: {
      type: Boolean,
      default: true
    }
  },
  emits: ['backdropclick'],

  setup(props, ctx) {
    const state = computed(() => props.opened ? 'opened' : 'closed');
    const colors = computed(() => ({
      bg: cls('bg-white', useDarkClasses('dark:bg-black')),
      ...(props.colors || {})
    }));
    const c = useThemeClasses(props, () => ({
      base: {
        common: cls('left-1/2 top-1/2 transition-transform transform -translate-x-1/2 duration-400 z-40 md:rounded max-w-full max-h-full overflow-hidden md:no-safe-areas', colors.value.bg, positionClass('fixed', ctx.attrs.class), props.size),
        ios: '',
        material: 'shadow-2xl',
        opened: '-translate-y-1/2',
        closed: 'translate-y-full'
      },
      backdrop: {
        common: 'fixed z-40 w-full h-full left-0 top-0 bg-black bg-opacity-50 duration-400',
        opened: '',
        closed: 'opacity-0 pointer-events-none'
      }
    }));

    const onBackdropClick = e => {
      ctx.emit('backdropclick', e);
    };

    const classes = computed(() => cls(c.value.base[state.value], ctx.attrs.class));
    return {
      classes,
      onBackdropClick,
      c,
      state
    };
  }

};