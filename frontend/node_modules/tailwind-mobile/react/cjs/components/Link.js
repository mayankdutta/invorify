"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _cls = require("../shared/cls.js");

var _positionClass = require("../shared/position-class.js");

var _useTheme = require("../shared/use-theme.js");

var _useThemeClasses = require("../shared/use-theme-classes.js");

var _useTouchRipple = require("../shared/use-touch-ripple.js");

var _useDarkClasses = require("../shared/use-dark-classes.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Link = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  const {
    component = 'a',
    className,
    colors: colorsProp,
    // Toolbar/navbar link
    navbar,
    toolbar,
    iconOnly,
    tabbar,
    tabbarActive,
    touchRipple = true,
    ios,
    material,
    onClick,
    // Children
    children,
    // Rest
    ...rest
  } = props;
  const rippleElRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, () => ({
    el: rippleElRef.current
  }));
  const Component = component;
  const attrs = { ...rest
  };
  const theme = (0, _useTheme.useTheme)({
    ios,
    material
  });
  const themeClasses = (0, _useThemeClasses.useThemeClasses)({
    ios,
    material
  });
  const dark = (0, _useDarkClasses.useDarkClasses)();
  const needsTouchRipple = theme === 'material' && (toolbar || tabbar || navbar) && touchRipple;
  (0, _useTouchRipple.useTouchRipple)(rippleElRef, needsTouchRipple);
  const colors = {
    text: 'text-primary',
    tabbarInactive: (0, _cls.cls)(`text-black`, dark('dark:text-white dark:text-opacity-55')),
    ...colorsProp
  };
  const textColor = tabbar && !tabbarActive ? colors.tabbarInactive : colors.text;
  const tabbarState = tabbarActive ? 'active' : 'inactive';
  const c = themeClasses({
    base: {
      common: (0, _cls.cls)(textColor, `inline-flex space-x-1 justify-center items-center cursor-pointer select-none`, needsTouchRipple && `touch-ripple-primary ${(0, _positionClass.positionClass)('relative', className)} z-10`),
      notTabbar: {
        ios: `active:opacity-30 duration-300 active:duration-0`,
        material: needsTouchRipple ? '' : `active:opacity-55`
      }
    },
    tabbar: {
      common: (0, _cls.cls)((0, _positionClass.positionClass)('relative', className), `w-full h-full duration-300`),
      material: 'uppercase font-medium text-sm overflow-hidden z-10',
      active: {},
      inactive: {
        ios: 'text-opacity-40',
        material: 'text-opacity-55'
      }
    },
    tabbarHighlight: {
      material: 'absolute left-0 top-0 w-full h-0.5 bg-primary duration-300',
      active: 'opacity-100',
      inactive: 'opacity-0'
    },
    toolbar: {
      common: (0, _cls.cls)(`h-full max-h-12`, iconOnly && 'touch-ripple-inset'),
      material: 'px-3'
    },
    navbar: {
      common: (0, _cls.cls)(`h-full max-h-12`, iconOnly && 'touch-ripple-inset'),
      material: 'px-3'
    }
  });
  const classes = (0, _cls.cls)( // base
  c.base[tabbar ? 'default' : 'notTabbar'], toolbar && c.toolbar, navbar && c.navbar, tabbar && c.tabbar[tabbarState], className);
  return /*#__PURE__*/_react.default.createElement(Component, _extends({
    ref: rippleElRef,
    className: classes
  }, attrs, {
    onClick: onClick
  }), theme === 'material' && tabbar && /*#__PURE__*/_react.default.createElement("span", {
    className: c.tabbarHighlight[tabbarState]
  }), children);
});
Link.displayName = 'Link';
var _default = Link;
exports.default = _default;