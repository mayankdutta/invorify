"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _cls = require("../shared/cls.js");

var _useTheme = require("../shared/use-theme.js");

var _useThemeClasses = require("../shared/use-theme-classes.js");

var _useTouchRipple = require("../shared/use-touch-ripple.js");

var _ChevronIcon = _interopRequireDefault(require("./icons/ChevronIcon.js"));

var _useDarkClasses = require("../shared/use-dark-classes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const ListItem = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  const {
    component = 'li',
    colors: colorsProp,
    className,
    mediaClassName = '',
    innerClassName = '',
    innerChildren,
    contentClassName = '',
    contentChildren,
    titleWrapClassName = '',
    titleFontSizeIos = 'text-list-title-ios',
    titleFontSizeMaterial = 'text-list-title-material',
    // Content props
    title,
    subtitle,
    text,
    after,
    media,
    header,
    footer,
    menuListItem,
    menuListItemActive,
    hairlines = true,
    // Enable divider
    divider,
    groupTitle,
    // Title
    strongTitle = 'auto',
    // Label props
    label,
    // Link props
    chevron = true,
    chevronIcon,
    href,
    target,
    link,
    linkComponent = 'a',
    linkProps = {},
    ios,
    material,
    touchRipple = true,
    // Children
    children,
    // Rest
    ...rest
  } = props;
  const rippleElRef = (0, _react.useRef)(null);
  const elRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, () => ({
    el: elRef.current
  }));
  const Component = component;
  const attrs = { ...rest
  };
  const theme = (0, _useTheme.useTheme)({
    ios,
    material
  });
  const themeClasses = (0, _useThemeClasses.useThemeClasses)({
    ios,
    material
  });
  const dark = (0, _useDarkClasses.useDarkClasses)();
  const colors = {
    text: (0, _cls.cls)(`text-black`, dark('dark:text-white')),
    menuListItemText: (0, _cls.cls)(`text-primary`, dark('dark:text-white')),
    menuListItemActiveBg: 'bg-primary dark:bg-primary',
    ...colorsProp
  };
  const isMenuListItemActive = menuListItem && menuListItemActive;
  const textColor = isMenuListItemActive ? colors.menuListItemText : colors.text;
  const isLink = !!href || href === '' || menuListItem || link;
  const isLabel = !!label;
  const needsTouchRipple = theme === 'material' && (isLabel || isLink) && touchRipple;
  (0, _useTouchRipple.useTouchRipple)(rippleElRef, needsTouchRipple);
  const hrefComputed = href === true || href === false || typeof href === 'undefined' ? undefined : href || '';
  const ItemContentComponent = isLink ? linkComponent : isLabel ? 'label' : 'div';
  const linkPropsComputed = isLink ? {
    href: hrefComputed,
    target,
    ...linkProps
  } : {};
  const autoStrongTitle = strongTitle === 'auto' && title && (subtitle || text);
  const c = themeClasses({
    base: menuListItem ? `${textColor} py-1` : '',
    itemContent: {
      common: (0, _cls.cls)(menuListItem ? 'pl-2 ml-2-safe mr-2-safe rounded-lg' : 'pl-4-safe', `flex items-center ${contentClassName}`),
      link: (0, _cls.cls)('duration-300 active:duration-0 cursor-pointer select-none', hairlines && 'active:hairline-transparent', needsTouchRipple && (0, _cls.cls)(`relative overflow-hidden`, dark('dark:touch-ripple-white z-10')), isMenuListItemActive ? (0, _cls.cls)(colors.menuListItemActiveBg, 'bg-opacity-15') : (0, _cls.cls)(`active:bg-black active:bg-opacity-10`, dark('dark:active:bg-white dark:active:bg-opacity-10')))
    },
    media: {
      common: `mr-4 flex-shrink-0 ${mediaClassName}`,
      ios: 'py-2',
      material: 'py-3 min-w-10'
    },
    inner: {
      common: (0, _cls.cls)('pr-4-safe w-full relative', !menuListItem && hairlines && 'hairline-b', innerClassName),
      ios: 'py-2.5',
      material: 'py-3'
    },
    titleWrap: {
      common: (0, _cls.cls)(`flex justify-between items-center ${titleWrapClassName}`),
      ios: (0, _cls.cls)(!menuListItem && titleFontSizeIos),
      material: (0, _cls.cls)(!menuListItem && titleFontSizeMaterial)
    },
    title: {
      common: `flex-shrink`,
      menuListItem: (0, _cls.cls)('text-sm', strongTitle === true || autoStrongTitle ? 'font-semibold' : 'font-medium'),
      strong: {
        common: '',
        ios: 'font-semibold',
        material: 'font-medium'
      }
    },
    after: (0, _cls.cls)(textColor, `text-opacity-55 flex-shrink-0 ml-auto pl-1 flex items-center space-x-1`, dark('dark:text-opacity-55')),
    chevron: 'opacity-20 flex-shrink-0 ml-3',
    subtitle: 'text-sm',
    text: (0, _cls.cls)(textColor, `text-sm text-opacity-55 line-clamp-2`, dark('dark:text-opacity-55')),
    header: 'text-xs mb-0.5',
    footer: (0, _cls.cls)(textColor, `text-xs text-opacity-55 mt-0.5`, dark('dark:text-opacity-55')),
    divider: {
      common: (0, _cls.cls)(`bg-list-divider-light text-black text-opacity-55 pl-4-safe pr-4-safe py-1 flex items-center z-20`, divider ? 'relative' : 'sticky top-0', dark(`dark:bg-list-divider-dark dark:text-white dark:text-opacity-55`)),
      ios: `h-8${hairlines ? ' hairline-t' : ''} -mt-px text-list-title-ios`,
      material: 'h-12 text-list-title-material'
    }
  }, className);
  const itemContentClasses = isLink || isLabel ? c.itemContent.link : c.itemContent.default;
  const titleClasses = menuListItem ? c.title.menuListItem : strongTitle === true || autoStrongTitle ? c.title.strong : c.title.default;

  if (divider || groupTitle) {
    return /*#__PURE__*/_react.default.createElement(Component, {
      className: (0, _cls.cls)(c.divider, className)
    }, title, children);
  }

  return /*#__PURE__*/_react.default.createElement(Component, _extends({
    ref: elRef,
    className: c.base
  }, attrs), /*#__PURE__*/_react.default.createElement(ItemContentComponent, _extends({
    ref: rippleElRef,
    className: itemContentClasses
  }, linkPropsComputed), media && /*#__PURE__*/_react.default.createElement("div", {
    className: c.media
  }, media), /*#__PURE__*/_react.default.createElement("div", {
    className: c.inner
  }, header && /*#__PURE__*/_react.default.createElement("div", {
    className: c.header
  }, header), (title || after) && /*#__PURE__*/_react.default.createElement("div", {
    className: c.titleWrap
  }, title && /*#__PURE__*/_react.default.createElement("div", {
    className: titleClasses
  }, title), after && /*#__PURE__*/_react.default.createElement("div", {
    className: c.after
  }, after), isLink && chevron && !menuListItem && (chevronIcon || /*#__PURE__*/_react.default.createElement(_ChevronIcon.default, {
    className: c.chevron
  }))), subtitle && /*#__PURE__*/_react.default.createElement("div", {
    className: c.subtitle
  }, subtitle), text && /*#__PURE__*/_react.default.createElement("div", {
    className: c.text
  }, text), footer && /*#__PURE__*/_react.default.createElement("div", {
    className: c.footer
  }, footer), innerChildren), contentChildren), children);
});
ListItem.displayName = 'ListItem';
var _default = ListItem;
exports.default = _default;